name: manual-deploy

#Dynamically configuring action name
run-name: >-
  ${{ github.event.inputs.single_deploy
    && format('Manual single deploy - app: {0}, run-id: {1}, actor {2}', inputs.single_deploy, github.run_id, github.triggering_actor )
    || format('Manual parallel deploy - app group: {0}, run-id {1}, actor {2}', inputs.parallel_deploy, github.run_id, github.triggering_actor ) }}

#---------------------------------------------------------------------#
#The queued job or workflow will be pending. Any previously pending job or workflow in the concurrency group will be canceled. 
#Doc: https://docs.github.com/en/actions/using-workflows/workflow-syntax-for-github-actions#concurrency
#There is a discussion regarding this, the issue doesn't seem to be resolved yet. 
#Concurrency Cancel Pending discussion: https://github.com/orgs/community/discussions/5435
#---------------------------------------------------------------------#

concurrency:
  group: deploy

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      single_deploy:
        description: 'Name of the application'
        required: false
      parallel_deploy:
        description: 'Name of the group'
        required: false

#---------------------------------------------------------------------#
#You can use permissions to modify the default permissions granted to the GITHUB_TOKEN, adding or removing access as required, so that you only allow the minimum required access.
#Doc: https://docs.github.com/en/actions/using-jobs/assigning-permissions-to-jobs
#---------------------------------------------------------------------#

permissions:
  id-token: write
  contents: read
  issues: write
  pull-requests: write

jobs:
#---------------------------------------------------------------------#
#Reusing workflows, Doc: https://docs.github.com/en/actions/using-workflows/reusing-workflows
#---------------------------------------------------------------------#
  run_test_for_app:
    if: "${{ github.event.inputs.parallel_deploy == '' }}"
    uses: ./.github/workflows/nested.yml
    with:
      application_name: "${{ github.event.inputs.single_deploy }}"

  run_test_for_group:
    if: "${{ github.event.inputs.single_deploy == '' }}"
    uses: ./.github/workflows/nested.yml
    with:
      application_name: "${{ github.event.inputs.parallel_deploy }}"

  single_deploy:
    needs: [run_test_for_app]
    if: "${{ github.event.inputs.parallel_deploy == '' }}"
    runs-on: ubuntu-latest

    steps:
      - name: echo name
        run: |
          echo ${{ github.event.inputs.single_deploy }}

  parallel_deploy:
    needs: [run_test_for_group]
    if: "${{ github.event.inputs.single_deploy == '' }}"
    runs-on: ubuntu-latest

    steps:
      - name: echo name
        run: |
          echo ${{ github.event.inputs.parallel_deploy }}

#---------------------------------------------------------------------#
#Slack Send GitHub Action, Doc: https://github.com/slackapi/slack-github-action
#---------------------------------------------------------------------#
  # notification:
  #   runs-on: ubuntu-latest
  #     - name: ðŸŽ‰ Notify Slack On Success
  #       id: slack
  #       uses: slackapi/slack-github-action@v1.18.0
  #       with:
  #         payload: |
  #           {
  #             "message": ":tada: Successfull deploying!\nRunID: ${{ github.run_id }}\nTriggered by: [https://github.com/${{ github.triggering_actor }}]"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  #     - name: ðŸ’€ Notify Slack On Failure
  #       if: failure()
  #       uses: slackapi/slack-github-action@v1.18.0
  #       with:
  #         payload: |
  #           {
  #             "message": ":skull: Failed deploying!\nRunID: ${{ github.run_id }}\nTriggered by: [https://github.com/${{ github.triggering_actor }}]"
  #           }
  #       env:
  #         SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

#---------------------------------------------------------------------#
#Generate summary, Doc: https://docs.github.com/en/actions/using-workflows/workflow-commands-for-github-actions#adding-a-job-summary
#---------------------------------------------------------------------#
  generate_summary:
    runs-on: ubuntu-latest
    steps:
      - name: Generate summary for app
        if: "${{ github.event.inputs.parallel_deploy == '' }}"
        run: |
          echo "### Summary! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.single_deploy }} application has been successfully deployed!" >> $GITHUB_STEP_SUMMARY
      - name: Generate summary for group
        if: "${{ github.event.inputs.single_deploy == '' }}"
        run: |
          echo "### Summary! :rocket:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.inputs.parallel_deploy }} group has been successfully deployed!" >> $GITHUB_STEP_SUMMARY